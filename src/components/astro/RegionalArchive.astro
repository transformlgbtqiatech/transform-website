---
import BaseLayout from "@layouts/BaseLayout.astro";
import { Content as TitleContent } from "../../singletons-data/regional-archives/title.mdx";
import Prose from "@components/astro/Prose.astro";
import tailwindConfig from "@root/tailwind.config.ts";
import resolveConfig from "tailwindcss/resolveConfig";
import { ChevronDownIcon } from "lucide-react";
import type { RegionalArchivesPageProps } from "@root/src/pages/regional-archives/_utils";

const config = resolveConfig(tailwindConfig);
type Props = RegionalArchivesPageProps;

const {
  regionalLanguages = [],
  regionalArchivesMediums = [],
  selectedLanguageId,
  selectedMediumId,
  regionalArchivesList,
} = Astro.props;
---

<BaseLayout title="Regional Archives" description="Regional Archives">
  <div class="py-16 bg-zinc-100 dark:bg-zinc-900 lg:text-center px-6">
    <div class="flex flex-col gap-5">
      <h1 class="text-6xl text-zinc-800 dark:text-zinc-200">
        <span class="font-bold">Regional/</span><span class="italic"
          >archives</span
        >
      </h1>

      <Prose
        class="prose-a:dark:text-sky-400 prose-a:text-sky-500 text-zinc-800 dark:text-zinc-200 max-w-4xl mx-auto"
      >
        <TitleContent />
      </Prose>
    </div>
  </div>

  <main class="max-w-5xl mx-auto py-6 px-6 lg:py-8">
    <!-- <hr class="mb-8" /> -->

    <h2
      class="text-3xl font-oswald dark:text-zinc-200 my-3"
      id="archive-container"
    >
      Choose a Language
    </h2>

    {
      regionalLanguages.length > 0 ? (
        <div class="inline-block relative">
          <select
            id="language-select"
            name="language-select"
            class="appearance-none px-3 py-1 pr-6 border-2 border-zinc-600 rounded-xl"
          >
            {regionalLanguages.map((languageData) => {
              return (
                <option
                  value={languageData.id}
                  selected={selectedLanguageId === languageData.id}
                >
                  {languageData.language}
                </option>
              );
            })}
          </select>
          <div class="absolute right-1 top-[7px] pointer-events-none">
            <ChevronDownIcon size={20} />
          </div>
        </div>
      ) : null
    }

    {
      regionalArchivesMediums?.length > 0 ? (
        <div class="inline-block relative">
          <select
            name="reltional-archives-medium"
            id="reltional-archives-medium"
            class="appearance-none px-3 py-1 pr-6 border-2 border-zinc-600 rounded-xl"
          >
            {regionalArchivesMediums.map((medium) => {
              return (
                <option
                  value={medium.id}
                  selected={selectedMediumId === medium.id}
                >
                  {medium.data.name}
                </option>
              );
            })}
          </select>
          <div class="absolute right-1 top-[7px] pointer-events-none">
            <ChevronDownIcon size={20} />
          </div>
        </div>
      ) : null
    }

    {
      regionalArchivesList.length > 0 ? (
        <ul
          class="mt-10 grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4"
          id="archive-list-container"
        >
          {regionalArchivesList?.map(async (el) => {
            const { title, url, year, authorOrCreator, medium } = el.data ?? {};
            const { Content } = await el.render();

            return (
              <li class="shadow-transform rounded-t-md border-[1px] border-zinc-300 dark:border-zinc-800 dark:bg-zinc-900 flex flex-col ">
                <div class="rounded-t-md bg-zinc-900 dark:bg-zinc-700 text-zinc-200 p-6 flex flex-col gap-2">
                  <div class="flex gap-1">
                    <p class="text-zinc-900 bg-zinc-200 rounded-full py-[2px] px-[10px] text-xs w-fit font-semibold">
                      {medium}
                    </p>

                    {/* <p class="text-zinc-900 bg-zinc-200 rounded-full py-[2px] px-[10px] text-xs w-fit font-semibold">
                      {language}
                    </p> */}
                  </div>

                  {/* <p class="text-zinc-900 bg-zinc-200 rounded-full py-[2px] px-[10px] text-xs w-fit font-semibold">
                    {language}
                  </p> */}

                  <p class="text-lg font-medium line-clamp-1" title={title}>
                    {title}
                  </p>
                </div>

                <div class="p-4 dark:bg-zinc-800 flex-1">
                  <a
                    href={url}
                    class="flex gap-1 text-sky-500 dark:text-sky-400"
                    title={url}
                    target="_blank"
                    rel="noreferrer"
                  >
                    <div class="w-4">
                      <svg
                        xmlns="http://www.w3.org/2000/svg"
                        width={24}
                        height={24}
                        viewBox="0 0 24 24"
                        fill="none"
                        stroke="currentColor"
                        stroke-width={2}
                        stroke-line-cap="round"
                        stroke-line-join="round"
                        class="lucide lucide-external-link w-4 h-4 mr-1"
                      >
                        <path d="M15 3h6v6M10 14L21 3M18 13v6a2 2 0 01-2 2H5a2 2 0 01-2-2V8a2 2 0 012-2h6" />
                      </svg>
                    </div>
                    <span class="text-xs truncate">
                      {url.replace("https://", "")}
                    </span>
                  </a>

                  <div class="flex gap-2 text-xs text-zinc-500 dark:text-zinc-400 mt-2 font-medium">
                    <span>{authorOrCreator}</span>
                    {year ? (
                      <>
                        <span>&middot;</span>
                        <span>{year}</span>
                      </>
                    ) : null}
                  </div>
                  {/* 
              {el.body.trim() === "" ? null : (
                <hr class="my-3 text-zinc-500" />
              )} */}

                  <div class="text-sm text-zinc-500 dark:text-zinc-400 mt-4 mb-3">
                    <Content />
                  </div>
                </div>
              </li>
            );
          })}
        </ul>
      ) : (
        <p class="mt-6">No archive found for these filters.</p>
      )
    }
  </main>
</BaseLayout>

<script>
  const languageSelectEl = document.querySelector(
    "#language-select",
  ) as HTMLSelectElement;

  function extractPathParams(url: string) {
    const parts = new URL(url).pathname.split("/").filter(Boolean);

    const pathParams = {
      language: parts[1] || null,
      medium: parts[2] || null,
    };

    return pathParams;
  }

  function constructUrl(
    language: string | null = null,
    medium: string | null = null,
  ) {
    let baseUrl = "/regional-archives";

    if (language) {
      baseUrl += `/${language}`;
    }

    const { language: languageFromUrl } = extractPathParams(
      window.location.href,
    );

    if (medium) {
      if (!languageFromUrl) {
        baseUrl += `/${language ?? "english"}/${medium}`;
      } else if (medium === "all") {
        baseUrl += `/`;
      } else {
        baseUrl += `/${medium}`;
      }
    }

    return baseUrl;
  }

  languageSelectEl.addEventListener("change", (e) => {
    const target = e.target as HTMLSelectElement;
    const languageId = target.value;
    const { medium } = extractPathParams(window.location.href);
    window.location.href = constructUrl(languageId, medium);
  });

  const regionalArchivesMediumSelectEl = document.querySelector(
    "#reltional-archives-medium",
  ) as HTMLSelectElement;

  regionalArchivesMediumSelectEl.addEventListener("change", (e) => {
    const target = e.target as HTMLSelectElement;
    const mediumId = target.value;
    const { language } = extractPathParams(window.location.href);
    window.location.href = constructUrl(language, mediumId);
  });

  // function scrollToList() {
  //   const archiveContainerEl = document.querySelector(
  //     "#archive-container",
  //   ) as HTMLElement;

  //   archiveContainerEl.scrollIntoView({
  //     behavior: "smooth",
  //     block: "start",
  //   });
  // }

  // document.addEventListener("astro:page-load", scrollToList);

  // if (document.readyState === "loading") {
  //   document.addEventListener("DOMContentLoaded", scrollToList);
  // } else {
  //   scrollToList();
  // }
</script>
