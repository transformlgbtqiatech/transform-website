---
type Props = {
  textSize?: "xs" | "sm" | "md" | "lg" | "xl";
  variant?: "orange" | "grey";
};

const { textSize = "xl", variant = "grey" } = Astro.props;
---

<div
  role="img"
  aria-label="An animation asking you to slowly breathe in and out."
  class="w-full h-full contain-size"
  id="circle-container"
>
  <!-- outer circle -->
  <div
    class:list={[
      "border-4 rounded-full w-full h-full p-20 relative shadow-2xl",
      {
        "border-zinc-300": variant === "grey",
        "border-orange-transform dark:border-orange-transformLight bg-orange-transform dark:bg-orange-transformLight":
          variant === "orange",
      },
    ]}
    id="outer-circle"
  >
    <!-- inner circle -->
    <!-- border-zinc-30 -->
    <div
      class:list={[
        "border-2 rounded-full w-full h-full absolute",
        {
          "border-zinc-300 bg-zinc-200": variant === "grey",
          "border-[#b54226] bg-[#b54226]": variant === "orange",
        },
      ]}
      id="inner-circle"
    >
      <p
        class:list={[
          "absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-full text-center font-bold uppercase",
          {
            "text-zinc-500": variant === "grey",
            "text-zinc-100": variant === "orange",
          },
          {
            "text-xl": textSize === "xl",
            "text-lg": textSize === "lg",
            "text-md": textSize === "md",
            "text-sm": textSize === "sm",
            "text-xs": textSize === "xs",
          },
        ]}
        id="breathing-text"
      >
        <span
          id="breathe-in-text"
          class="absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 w-full"
          >Breathe In</span
        >
        <span
          id="breathe-out-text"
          class="absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 w-full"
          >Breathe Out</span
        >
      </p>
    </div>
  </div>
</div>

<style>
  @keyframes pulse {
    0% {
      width: 35%; /* Starting at 75% of outer circle (35% from dot) */
      height: 35%;
    }
    50% {
      width: 75%; /* Max expansion to 85% (15% from outer circle) */
      height: 75%;
    }
    100% {
      width: 40%;
      height: 40%;
    }
  }

  @keyframes textPulse {
    0%,
    100% {
      font-size: 0.5em;
    }
    50% {
      font-size: 1.5em;
    }
  }

  @media (min-width: 1024px) {
    @keyframes textPulse {
      0%,
      100% {
        font-size: 1em;
      }
      50% {
        font-size: 2.4em;
      }
    }
  }

  @keyframes breatheInText {
    0% {
      opacity: 0.2;
    }
    25% {
      opacity: 1;
    }
    50% {
      opacity: 0;
    }
    100% {
      opacity: 0;
    }
  }

  @keyframes breatheOutText {
    0% {
      opacity: 0;
    }
    50% {
      opacity: 0;
    }
    80% {
      opacity: 1;
    }
    100% {
      opacity: 0;
    }
  }

  /* @container (max-width: 15rem) {
  } */

  #breathe-in-text {
    animation: breatheInText 10s ease-in-out infinite;
  }

  #breathe-out-text {
    animation: breatheOutText 10s ease-in-out infinite;
  }

  #inner-circle {
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    animation: pulse 10s ease-in-out infinite;
  }

  #breathing-text {
    /* animation: textPulse 10s ease-in-out infinite; */
  }

  .transition-hide {
    transition: opacity 1s ease;
    opacity: 0;
  }
</style>
