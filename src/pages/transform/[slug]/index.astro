---
import BaseLayout from "@layouts/BaseLayout.astro";
import Prose from "@components/astro/Prose.astro";
import Footnote from "@components/astro/Footnote.astro";
import Glossary from "@components/astro/Glossary.astro";
import { cms } from "@cms/reader";
import type { CollectionEntry } from "astro:content";
import { getStaticPathsToolPages } from "./_get-static-paths";
import { getToolPageContentComponents } from "./_get-content-components";
import KnowledgeSidebar from "@components/astro/KnowledgeSidebar.astro";
import { TriggerWarningDialog } from "@components/react/TriggerWarningDialog";
import WorkInProgress from "./_WorkInProgress.astro";

export type KnowledgePost = CollectionEntry<"knowledge-posts">;
export const getStaticPaths = getStaticPathsToolPages;

const contentRenderers = await getToolPageContentComponents(
  Astro.props.knowledgePost?.slug as KnowledgePost["slug"],
);

const { MainContent, RecommendedReadingContent } = contentRenderers ?? {};

const { identityGroupSlug, violenceSubCategorySlug, knowledgePost } =
  Astro.props;

const identityGroupData =
  await cms.collections.identityGroup.read(identityGroupSlug);

const violenceSubCategoryData = await cms.collections.violenceSubCategory.read(
  violenceSubCategorySlug,
);

const identityGroupHeading = identityGroupData?.name;
const violenceSubCategoryHeading =
  violenceSubCategoryData?.descriptiveText ?? violenceSubCategoryData?.name;

let subCategoryTextColor = "";
switch (violenceSubCategoryData?.category) {
  case "assault":
    subCategoryTextColor = "text-red-transform"; // Tailwind CSS class for red text
    break;
  case "degradation":
    subCategoryTextColor = "text-orange-transform"; // Tailwind CSS class for yellow text
    break;
  case "normalisation":
    subCategoryTextColor = "text-yellow-transform"; // Tailwind CSS class for green text
    break;
  default:
    break;
}

const triggerWarningType = knowledgePost?.entry.triggerWarning;
---

<BaseLayout title="Transform" description="Transform tool">
  <TriggerWarningDialog type={triggerWarningType} client:load />
  <main class="p-6 lg:p-10 max-w-3xl mx-auto relative">
    <p
      class="flex gap-2 items-center dark:text-zinc-200 text-zinc-500 lg:absolute lg:-left-6 lg:top-16"
    >
      <KnowledgeSidebar
        preSelectedSlugs={{
          identityGroupSlug: identityGroupSlug,
          violenceSubCategorySlug: violenceSubCategorySlug,
        }}
      />
    </p>

    <hr class="my-4 lg:hidden" />

    <p
      class:list={[
        "m-0 font-oswald font-medium text-2xl uppercase",
        subCategoryTextColor,
      ]}
    >
      {violenceSubCategoryHeading} Faced by
    </p>

    <h1 class="italic m-0 dark:text-zinc-100 font-bold text-4xl relative">
      <span>{identityGroupHeading}</span>
    </h1>

    <h2 class:list={[subCategoryTextColor, "font-bold text-2xl my-2 mt-5"]}>
      Overview
    </h2>

    <Prose
      class="mx-auto prose-a:dark:text-sky-400 prose-a:text-sky-500 dark:text-zinc-300 max-w-none prose-h2:my-6 prose-h2:dark:text-white"
    >
      {
        MainContent ? (
          <MainContent
            components={{
              /** @note
               * make sure that these are astro components if you want client side functionality with react components. You can use `client:` directives in the react component to make it interactive
               */
              Footnote: Footnote,
              Glossary: Glossary,
            }}
          />
        ) : (
          <WorkInProgress />
        )
      }

      {
        RecommendedReadingContent ? (
          <>
            <h2>Recommended</h2>
            <RecommendedReadingContent
              components={{
                /** @note
                 * make sure that these are astro components if you want client side functionality with react components. You can use `client:` directives in the react component to make it interactive
                 */
                Footnote: Footnote,
                Glossary: Glossary,
              }}
            />
          </>
        ) : null
      }
    </Prose>
  </main>
</BaseLayout>

<style is:global>
  /* FOOTNOTES STYLES */
  .footnotes :target {
    background: hsl(240 5.9% 90%);
    border-radius: 8px;
  }

  html.dark .footnotes :target {
    background: hsl(240 5.3% 26.1%);
  }

  html.dark .footnotes h2 {
    color: white;
  }

  [data-footnote-ref]:focus {
    outline: thin dotted;
    outline-offset: 2px;
  }
</style>
