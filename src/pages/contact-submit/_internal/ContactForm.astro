---
import Label from "./Label.astro";
import Input from "./Input.astro";
import LabelDescription from "./LabelDescription.astro";
import Select from "./Select.astro";
import TextArea from "./TextArea.astro";
import { getCollection } from "astro:content";
import { submitTypeSelectOptions } from "./select-options";
import { actions } from "astro:actions";
import type { ContactFormInputErrors } from "../index.astro";

const identityGroups = await getCollection("identity-groups");
const violenceSubCategories = await getCollection("violence-sub-categories");

const identitySelectOptions = identityGroups.map((identityGroup) => {
  return {
    value: identityGroup.id,
    text: identityGroup.data.name,
  };
});

const violenceSubCategorySelectOptions = violenceSubCategories.map(
  (violenceSubCategory) => {
    return {
      value: violenceSubCategory.id,
      text: violenceSubCategory.data.name,
    };
  },
);

type Props = {
  inputErrors: ContactFormInputErrors;
};

function makeErrorString(errors: string[] = []) {
  return errors.join(", ");
}

const { inputErrors } = Astro.props;
---

<form
  method="POST"
  class="flex flex-col gap-4 lg:max-w-[400px] flex-1"
  action={actions.submitContactForm}
>
  <div>
    <Label labelText="Name">
      <div>
        <Input name="name" placeholder="Your Name" />
        <LabelDescription> Leave empty to stay anonymous </LabelDescription>
      </div>
    </Label>

    <p>
      {makeErrorString(inputErrors.name)}
    </p>
  </div>

  <div>
    <Label labelText="Email">
      <Input name="email" placeholder="Your Email" />
    </Label>

    <p>
      {makeErrorString(inputErrors.email)}
    </p>
  </div>

  <div>
    <Label labelText="Please choose a subject">
      <Select nameAndId="contactSubmitType" options={submitTypeSelectOptions} />
    </Label>

    <p>
      {makeErrorString(inputErrors.contactSubmitType)}
    </p>
  </div>

  <div id="identity-group-select-label" class="hidden">
    <Label labelText="Identity Group">
      <Select nameAndId="identityGroup" options={identitySelectOptions} />
    </Label>

    <p>
      {makeErrorString(inputErrors.identityGroup)}
    </p>
  </div>

  <div class="hidden" id="violence-sub-category-select-label">
    <Label labelText="Violence Sub Category">
      <Select
        nameAndId="violenceSubCategory"
        options={violenceSubCategorySelectOptions}
      />
    </Label>

    <p>
      {makeErrorString(inputErrors.violenceSubCategory)}
    </p>
  </div>

  <div>
    <Label labelText="Your message">
      <TextArea nameAndId="message" required />
    </Label>

    <p class="mt-2 text-xs text-red-500">
      {makeErrorString(inputErrors.message)}
    </p>
  </div>

  <button
    class="text-left font-medium bg-yellow-transform text-white lg:w-fit px-5 py-2 rounded-full"
  >
    Submit
  </button>
</form>

<script>
  //
  //
  import type { SubmitType } from "./select-options";
  const identityGroupSelectLabelEl = document.querySelector(
    "#identity-group-select-label",
  ) as HTMLLabelElement;

  const violenceSubCategorySelectLabelEl = document.querySelector(
    "#violence-sub-category-select-label",
  ) as HTMLLabelElement;

  const submitTypeEl = document.querySelector(
    "#contactSubmitType",
  ) as HTMLSelectElement;

  const conditionalEls = [
    identityGroupSelectLabelEl,
    violenceSubCategorySelectLabelEl,
  ];

  function showConditionalFormFields() {
    conditionalEls.forEach((el) => {
      el.classList.remove("hidden");
      el.querySelector("select")?.removeAttribute("disabled");
    });
  }

  function hideConditionalFormFields() {
    conditionalEls.forEach((el) => {
      el.classList.add("hidden");
      el.querySelector("select")?.setAttribute("disabled", "disabled");
    });
  }

  submitTypeEl.addEventListener("change", (e) => {
    const target = e.target as HTMLSelectElement;
    const value = target.value as SubmitType;

    if (value === "contribute") {
      showConditionalFormFields();
    } else {
      hideConditionalFormFields();
    }
  });
</script>
