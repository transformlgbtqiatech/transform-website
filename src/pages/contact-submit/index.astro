---
import Hero from "@components/astro/Hero.astro";
import Prose from "@components/astro/Prose.astro";
import Socials from "@components/Socials.astro";
import BaseLayout from "@layouts/BaseLayout.astro";
import { actions, isActionError, isInputError } from "astro:actions";
import { getCollection } from "astro:content";
import { Content as BuyUsAKoFiContent } from "../../singletons-data/contact-submit/buyUsAKoFi.mdx";
import { Content as WhyThisInfoContent } from "../../singletons-data/contact-submit/whyThisInfo.mdx";
import { CloudflareError } from "./_internal/CloudflareError";
import { ContactForm } from "./_internal/ContactForm";
import ContactFormScript from "./_internal/ContactFormScript.astro";
import type { SubmitType } from "./_internal/select-options";

export const prerender = false;

const result = Astro.getActionResult(actions.submitContactForm);
const inputErrors = isInputError(result?.error) ? result.error.fields : null;

let browserChallengeErrorCode: "FORBIDDEN" | "CONFLICT" | "BAD_REQUEST" | null =
  null;

if (
  isActionError(result?.error) &&
  (result?.error?.code === "FORBIDDEN" ||
    result?.error?.code === "CONFLICT" ||
    result?.error?.code === "BAD_REQUEST")
) {
  browserChallengeErrorCode = result?.error?.code;
}

if (result && !result.error) {
  const searchParams = new URLSearchParams();
  searchParams.set("success", "true");

  if (result.data.input?.contactSubmitType) {
    searchParams.set("type", result.data.input.contactSubmitType);
  }

  if (result.data.input?.contactSubmitType === "contribute-lived-experiences") {
    searchParams.set("identityGroup", result.data.input.identityGroup);
    searchParams.set(
      "violenceSubCategory",
      result.data.input.violenceSubCategory,
    );
  }

  return Astro.redirect(`/contact-submit?${searchParams.toString()}`);
}

const isSuccessFormSubmission =
  Astro.url.searchParams.get("success") === "true";
const identityGroup = Astro.url.searchParams.get("identityGroup");
const violenceSubCategory = Astro.url.searchParams.get("violenceSubCategory");
const type = Astro.url.searchParams.get("type");

const identityGroups = await getCollection("identity-groups");
const violenceSubCategories = await getCollection("violence-sub-categories");

const identitySelectOptions = identityGroups.map((identityGroup) => {
  return {
    value: identityGroup.id,
    text: identityGroup.data.name,
  };
});

const violenceSubCategorySelectOptions = violenceSubCategories.map(
  (violenceSubCategory) => {
    return {
      value: violenceSubCategory.id,
      text: violenceSubCategory.data.name,
    };
  },
);

const typeParam = Astro.url.searchParams.get("type");

const initialValues: Record<string, string | undefined> = {
  contactSubmitType: typeParam as SubmitType | undefined,
};

export type InitialValues = typeof initialValues;
---

<ContactFormScript />

<BaseLayout
  title="Contact Submit To Transform"
  description="Contact Submit To Transform"
>
  {
    isSuccessFormSubmission ? (
      <p class="bg-green-600 text-white p-2 text-center">
        <span>Your message has been submitted.</span>

        {type === "contribute-lived-experiences" ? (
          <span>
            After it's accepted by our moderators, it'll show on the lived
            experiences section of{" "}
            <a
              href={`/transform/${identityGroup}-${violenceSubCategory}`}
              class="underline"
            >
              this page
            </a>
          </span>
        ) : null}
      </p>
    ) : null
  }

  {
    browserChallengeErrorCode ? (
      <p class="bg-red-600 text-white p-2 text-center">
        <CloudflareError errorCode={browserChallengeErrorCode} />
      </p>
    ) : null
  }

  <main>
    <Hero
      title={{
        normal: "Contact",
        slant: "Submit",
      }}
    >
      <p>
        Got a personal experience of violence to share (anonymously or not)?
        Think some of our content could use a refresh? Know any useful links or
        resources we should feature—especially in South Asian languages? Want to
        add grouping techniques that really work for you, to our Trigger Tookit?
        Got a cute floof at home whose videos might brighten up our page? Or
        maybe you've got some stress-busting tunes or feel-good bops to
        recommend? We'd love to hear it all—let us know
      </p>
    </Hero>

    <section class="max-w-4xl mx-auto py-6 px-3 lg:px-6">
      <div class="flex flex-col gap-8 lg:mt-10 justify-between">
        <section>
          <ContactForm
            initialValues={initialValues}
            identitySelectOptions={identitySelectOptions}
            violenceSubCategorySelectOptions={violenceSubCategorySelectOptions}
            inputErrorsFromServer={inputErrors}
            client:idle
          />
        </section>

        <section class="flex gap-2 flex-col">
          <h2 class="uppercase font-oswald text-2xl dark:text-zinc-200">
            Why do we ask for this information?
          </h2>

          <Prose
            class="prose-a:dark:text-sky-400 prose-a:text-sky-500 text-zinc-800 dark:text-zinc-200 prose-p:my-0 max-w-none"
          >
            <WhyThisInfoContent />
          </Prose>
        </section>

        <section class="flex gap-2 flex-col">
          <h2 class="uppercase font-oswald text-2xl text-yellow-transform">
            Buy us a ko-fi
          </h2>

          <Prose
            class="prose-a:dark:text-sky-400 prose-a:text-sky-500 text-zinc-800 dark:text-zinc-200 prose-p:my-0 max-w-none"
          >
            <BuyUsAKoFiContent />
          </Prose>
        </section>

        <section class="flex flex-col gap-3">
          <h2 class="uppercase font-oswald text-2xl text-yellow-transform">
            Follow us (please?)
          </h2>

          <div class="dark:hidden">
            <Socials type="blackOnWhite" />
          </div>

          <div class="hidden dark:block">
            <Socials type="whiteOnBlack" />
          </div>
        </section>
      </div>
    </section>
  </main>
</BaseLayout>
